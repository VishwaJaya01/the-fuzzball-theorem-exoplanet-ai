name: Build and Test The Fuzzball Theorem Exoplanet AI Frontend

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

env:
  # relative path to the Next.js project
  APP_DIR: the-fuzzball-theorem-exoplanet-ai-fe

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      vercel-output-path: ${{ steps.set-output-path.outputs.path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ${{ env.APP_DIR }}/package-lock.json

      - name: Restore Next.js build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.APP_DIR }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles(format('{0}/package-lock.json', env.APP_DIR)) }}-${{ hashFiles(format('{0}/**/*.js', env.APP_DIR), format('{0}/**/*.ts', env.APP_DIR), format('{0}/**/*.tsx', env.APP_DIR), format('{0}/**/*.jsx', env.APP_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles(format('{0}/package-lock.json', env.APP_DIR)) }}-

      - name: Install dependencies
        working-directory: ./${{ env.APP_DIR }}
        run: npm ci

      - name: Run ESLint
        working-directory: ./${{ env.APP_DIR }}
        run: npm run lint || true

      - name: Run Build
        id: build_step
        working-directory: ./${{ env.APP_DIR }}
        env:
          NODE_ENV: production
          # Provide the production API URL (set this secret in repo Settings -> Secrets and variables -> Actions)
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          # Add any other secrets your build needs here:
          # SOME_SERVER_SECRET: ${{ secrets.SOME_SERVER_SECRET }}
        run: |
          npm run build

      - name: Create Vercel project configuration
        working-directory: ./${{ env.APP_DIR }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          # Create .vercel directory and project.json
          mkdir -p .vercel
          echo '{"projectId":"${{ secrets.VERCEL_PROJECT_ID }}","orgId":"${{ secrets.VERCEL_ORG_ID }}"}' > .vercel/project.json
          
      - name: Create Vercel prebuilt output (.vercel/output)
        working-directory: ./${{ env.APP_DIR }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          # Ensure vercel CLI is available and produce .vercel/output
          npx vercel build --token "$VERCEL_TOKEN" --yes

      - name: Set build path output
        id: set-output-path
        run: echo "path=.vercel/output" >> $GITHUB_OUTPUT

      - name: Upload build artifact for debugging (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vercel-output
          path: ${{ env.APP_DIR }}/.vercel/output

  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Copy build output (from workspace)
        run: |
          # ensure we are in repo root, and the next step uses cwd to run deploy
          ls -la ./${{ env.APP_DIR }} || true
        working-directory: ./

      - name: Create Vercel project configuration for production
        working-directory: ./${{ env.APP_DIR }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          # Create .vercel directory and project.json
          mkdir -p .vercel
          echo '{"projectId":"${{ secrets.VERCEL_PROJECT_ID }}","orgId":"${{ secrets.VERCEL_ORG_ID }}"}' > .vercel/project.json
          
      - name: Deploy to Production
        working-directory: ./${{ env.APP_DIR }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          BACKEND_API_URL_PROD: ${{ secrets.BACKEND_API_URL_PROD }}
        run: |
          echo "Deploying to Vercel: PRODUCTION (main branch)"
          npx vercel deploy --cwd . --prebuilt --prod --confirm --token "$VERCEL_TOKEN"

      - name: Print deployed URL (optional)
        working-directory: ./${{ env.APP_DIR }}
        run: tail -n 50 ~/.npm/_logs/* || true

  preview-build:
    name: Preview Build
    needs: build
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Copy build output (from workspace)
        run: |
          # ensure we are in repo root, and the next step uses cwd to run deploy
          ls -la ./${{ env.APP_DIR }} || true
        working-directory: ./

      - name: Create Vercel project configuration for preview
        working-directory: ./${{ env.APP_DIR }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          # Create .vercel directory and project.json
          mkdir -p .vercel
          echo '{"projectId":"${{ secrets.VERCEL_PROJECT_ID }}","orgId":"${{ secrets.VERCEL_ORG_ID }}"}' > .vercel/project.json
          
      - name: Create Preview Build
        working-directory: ./${{ env.APP_DIR }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
        run: |
          echo "Creating Vercel Preview Build (branch: ${GITHUB_REF})"
          npx vercel deploy --cwd . --prebuilt --confirm --token "$VERCEL_TOKEN"

      - name: Print preview URL (optional)
        working-directory: ./${{ env.APP_DIR }}
        run: tail -n 50 ~/.npm/_logs/* || true