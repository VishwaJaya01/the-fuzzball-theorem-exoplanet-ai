name: Build and Test The Fuzzball Theorem Exoplanet AI Backend

on:
  # Run on pushes to any branch
  push:
    branches:
      - "**"

  # Run on pull requests targeting any branch
  pull_request:
    branches:
      - "**"

jobs:
  Build-Test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8 (if available)
        working-directory: ./backend
        run: |
          # Install flake8 for linting
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Type check with mypy (if available)
        working-directory: ./backend
        run: |
          pip install mypy types-requests
          mypy app --ignore-missing-imports || true
        continue-on-error: true

      - name: Create test data directories
        working-directory: ./backend
        run: |
          mkdir -p ../data/interim/features
          mkdir -p ../data/processed/lightcurves
          mkdir -p ../artifacts

      - name: Run tests with pytest
        working-directory: ./backend
        run: |
          # Install pytest-cov for coverage if not in requirements
          pip install pytest-cov
          python -m pytest app/tests/ -v --tb=short --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Test FastAPI application startup
        working-directory: ./backend
        run: |
          # Test that the application can start up
          python -c "from app.main import APP; print('FastAPI app imported successfully')"

      - name: Build Docker image (if Dockerfile exists)
        working-directory: ./backend
        run: |
          if [ -f Dockerfile ]; then
            echo "Building Docker image..."
            docker build -t exoplanet-ai-backend .
            echo "Docker image built successfully"
          else
            echo "No Dockerfile found, skipping Docker build"
          fi
        continue-on-error: true

  Security-Scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install safety for security scanning
        run: pip install safety

      - name: Run safety check
        working-directory: ./backend
        run: |
          safety check --json || true
        continue-on-error: true

      - name: Run bandit security linter
        working-directory: ./backend
        run: |
          pip install bandit
          bandit -r app/ -f json || true
        continue-on-error: true